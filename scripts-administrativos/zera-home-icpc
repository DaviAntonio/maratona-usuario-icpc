#!/bin/bash

exec &> /var/log/zera-home-icpc.log

if ! whoami | grep -q root; then
	echo "Este comando deve ser executado com privilégios de ROOT."
	echo "Considere colocar o comando \"sudo\" a frente da chamada."
	echo
	echo "Uso: sudo $0"
	exit 1
fi

# Se o usuario icpc não existe, o script deve passar adiante para cria-lo.
# No caso de uma nova instalação via LiveCD do maratona na máquina, o usuario
# não existe, e nesse caso, ele deve ser criado para que o ambiente já esteja
# pronto para uso. No caso de uma instação via apt, o .clean-home irá existir no
# diretorio, e o usuario não vai existir, o que deve cria-lo.
getent passwd icpc &>/dev/null
RESP="$?"
if [[ -d '/home/icpc' ]] && [[ ! -e '/home/icpc/.clean-home' ]] && [[ "$1" != "-f" ]] && ((RESP == 0)) ; then
	echo "No /home/icpc/.clean-home file found"
	echo "If you wish to clean anyway run:"
	echo "  $0 -f"
	exit 1
fi

printf "\nWriting /etc/nologin...\n"
echo "Cleaning ICPC home..." > /etc/nologin
printf "OK\n"

# Gera uma senha de inicio.
printf "\nGenerating temporary password\n"
pass=$(echo -n "icpc${RANDOM}" | makepasswd --clearfrom - --crypt-md5 | awk '{print $NF}')
printf "OK\n"

# Verifica a existencia do usuario ICPC
# Caso ele não exista, ele deve ser criado com a senha criada anteriormente.
printf "\nVerificando existência do usuário \"icpc\"\n"
if ((RESP != 0 )); then
	echo "."
	echo "Usuario não exite, criando..".
	useradd --home-dir '/home/icpc' --skel '/etc/skel' --create-home --password "${pass}" --shell '/bin/bash' --gid users icpc

	if ! grep -q "^icpc " /etc/security/limits.conf; then
		echo "icpc hard nproc 1024" >> /etc/security/limits.conf
	fi
fi

printf "\nGerando senha aleatória\n"
# Gerando nova senha para evitar login indesejado
pass=$(echo -n "${RANDOM}icpc${RANDOM}" | makepasswd --clearfrom - --crypt-md5 | awk '{print $NF}')
usermod --home '/home/icpc' --password "${pass}" --shell '/bin/bash' --gid users icpc
echo "OK"

printf "\nRecriando diretório home\n"
rm -rf /home/icpc
cp --archive /etc/skel /home/icpc
chown -R icpc:users /home/icpc
echo "OK"

# Os arquivos de configuração dos editores do maratona estão no diretório
# '/usr/share/maratona-usuario-icpc/editores-config' que são mantidos no skel e
# quando o usuario icpc é recriado, é copiado para a home do icpc
printf "\nCopying IDE configurations\n"
find /usr/share/maratona-usuario-icpc/editores-config \
	-maxdepth 1 \
	-mindepth 1 \
	-type d \
	-exec cp --archive --verbose {} /home/icpc \;
printf "OK\n"

# Copiando os atalhos da documentação para o o Desktop
printf "\nCopying .desktop files\n"
mkdir -p /home/icpc/Desktop/

desktop_files=(
	"/usr/share/applications/cppreference.desktop"
	"/usr/share/applications/javadoc.desktop"
	"/usr/share/applications/python3doc.desktop"
	"/usr/share/applications/kotlindoc.desktop"
)

readonly desktop_files
printf "OK\n"

# Bloquear a execução do diálogo de boas vindas no primeiro login do usuário
printf "\nBlocking GNOME's welcome dialogue\n"
mkdir -p /home/icpc/.config
echo "yes" > /home/icpc/.config/gnome-initial-setup-done
printf "OK\n"

# VSCode
# O caminho só existirá se o maratona-vscode-extensions estiver instalado
printf "\nCopying Visual Studio Code extensions\n"
if [ -d '/var/lib/maratona-vscode-extensions/extensions' ] ; then
	mkdir -p '/home/icpc/.vscode/extensions/'
	cp --recursive '/var/lib/maratona-vscode-extensions/extensions' '/home/icpc/.vscode'
else
	printf "'/home/icpc/.vscode/extensions/' was not found\n"
fi
printf "OK\n"

# Configurar repositório Maven
printf "\nConfiguring Maven repository\n"
echo "export MAVEN_REPOSITORY='/home/icpc/.m2/repository'" >> /home/icpc/.bashrc
printf "OK\n"

# Mudando o dono, pois este script roda como root, então o que ele cria
# pertence ao root, o que não deve acontecer.
printf "\nChanging owner fromm root to icpc\n"
chown -R icpc:users /home/icpc
printf "OK\n"

# Os atalhos precisam ser marcados como confiáveis na base de dados do GIO, e
# para isso, o DBUS deve estar funcionando, e o usuário que usará os atalhos
# deve ser o responsável por essa ação
# A expansão da variável é modificada para se obter somente o nome do arquivo a
# partir do caminho completo
printf "\nTrusting .desktop files\n"
for dfile in "${desktop_files[@]}"; do
	if [ -f "${dfile}" ]; then
		cp --verbose "${dfile}" /home/icpc/Desktop
		chown icpc:users "/home/icpc/Desktop/${dfile##*/}"
		chmod 755 "/home/icpc/Desktop/${dfile##*/}"
		systemd-run --pipe --wait --user --machine 'icpc@.host' \
			gio 'set' "/home/icpc/Desktop/${dfile##*/}" 'metadata::trusted' 'true'
		printf "Trusted '%s'\n" "/home/icpc/Desktop/${dfile##*/}"
	fi
done
printf "OK\n"

printf "\nRemoving temporary files\n"
for i in /media /mnt /var /opt /tmp /usr $(df | grep tmpfs | awk '{print $NF}'); do
	printf "Removing files from: %s\n" "${i}"
	find "${i}" -user icpc -delete -exec printf "Deleted '%s'\n" {} \;
done
printf "OK\n"

# Configurar a senha e o shell corretos sem alterar as configurações feitas no
# diretório /home/icpc
printf "\nConfiguring password and shell\n"
pass=$(echo -n 'icpc' | makepasswd --clearfrom - --crypt-md5 | awk '{print $NF}')
usermod --home '/home/icpc' --move-home --password "${pass}" --shell '/bin/bash' --gid users icpc
printf "OK\n"

sync

echo
echo "Tudo feito."
rm /etc/nologin

# Garantir modificações no disco antes de sair
sync

exit 0
